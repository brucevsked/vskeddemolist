
配置分享方便开发

代码配置+代码编写=项目代码

整个地区不同的人都在写登录界面，他们重复使用着共同的技术
整个地区不同的公司都在写登录界面，他们重复使用着共同的技术
整个国家的各地区公司都在写登录界面，他们重复使用共同技术
全球各国家各地区的公司都在写登录界面，他们重复使用类似技术。
这造成了全球代码编写人员的资源浪费，为解决这个问题，我们可以使用代码配置+代码编写的方案来解决。

代码配置是指配置软件中使用的框架，使用的语言，使用的架构分层，每个层所需要的对象。
代码编写是指有些无法通过配置实现的功能，可以使用代码编写来完成。如一些硬件对接操作。


i have a greate idea,but i have no money to implement it.
the application manager business data,business is based business rulers,
so we can configure application code to implement software product,
my idea is many java developer write application everyday,
but they write same function again and again,every country,
every company ,every develper write same file.
this is waster human resource,we must change it.
we can configure use which framework,
we can configure support languages,
we can configure application safe,
we can configure business object,view object,data Transfer Object,persistent Object etc. 
use this configure result,we can generate the java code,
like object properties account name,account password,
like object account
like object action 

we just configure once then use it everywhere.
and you can change the configuration files ,generate your owner application code;

if anybody agree with me,we can do it together.
good luck for every deveoper ,we can enter configuration code year

--------------------------------------------------------------------------------
配置是跨系统的，不同系统下软件的菜单一样。
配置是跨语言的，不同语言实现下应用菜单一样
配置是支持多语言的，不管是中文，英文都是一种配置
备份周期是一种配置，不管任何应用，数据都需要备份
需要对不同的配置进行分类
配置是要区分运行环境的，开发环境是一种配置，测试环境是一种配置，生产环境是一种配置。

用户角色权限的配置是一种配置管理
菜单的配置是一种配置管理
语言的配置是一种配置管理
配置是需要进行定期备份的
配置变更后需要使用版本来进行管理
配置的变更会记录日志

是否所有系统都可以通过配置来实现？


单个应用配置
多个应用共享配置
单个应用访问转换后其他应用配置

配置管理不仅仅可以是一个应用，还可以是一种常驻系统的服务。
通过这个服务可以监控当前配置的状态或进行远程变更
有些配置的变更是需要审核的，不同的配置变更影响等级不同。影响越大的配置变更越需要更多的人去审核。


配置管理与版本记录

备份配置

配置与对象


新建配置

配置名称

用户配置

角色配置

权限配置

用户角色配置

角色权限配置

新建对象（公开，项目公开，业务公开）
对象属性（存储类，计算类）
对象动作
动作影响属性



--------------------------------------------------------------------------------
配置有哪些分类

静态配置
动态配置
动静结合配置

公用配置
私有配置

加密配置
非加密配置
部分加密配置

硬件配置
软件配置

环境配置
语言配置
安全配置
日志配置

监控配置
警报配置


配置必须得到备份并通过系统日志记录进行前进与后退


配置初始化
增加配置
配置变更
配置审核
配置删除


对象执行动作前
记录对象各属性

执行动作

对象执行动作后
记录对象改变后各属性



--------------------------------------------------------------------------------

所有系统启动时都会先载入配置系统，
配置系统分为当前配置，备份配置列表，最小可用配置，出厂默认配置。
默认系统启动时会读取当前配置，当前配置读取失败或损坏时，会弹出备份配置列表，您可以在备份配置列表中选择一份最近的配置来启动系统。
就像windows中设置的最后一次正确配置。当配置列表中的配置无法启动配置时，可以尝试最小可用配置，当最小可用配置依然无法启动系统时，
可以选择出厂默认配置。

--------------------------------------------------------------------------------


软件是什么

配置+代码+数据，代码通过读取配置实现不同功能最终生成有价值的数据，这就是软件？

配置+代码=对象模型，对象模型+数据=软件

业务+配置+实现+数据

算法+数据结构
数据+技术实现+配置+业务
数据指最张生成的信息
技术实现指不同语言，不同技术的代码编写，但技术实现需要与配置搭配使用
配置，软件的核心，通过配置来表达一个完整的业务流程
业务，用户最终需要的功能



配置可以生成代码，代码打包可以部署，部署后客户使用系统会生成数据。
从以上可以看出，配置的备份是非常重要的一个环节，系统生成的数据备份也是非常重要的一个环节




--------------------------------------------------------------------------------


配置文件+对象=模型

生成项目
生成单元测试

--------------------------------------------------------------------------------

从面向对象编程，到面向配置编程

对象生命周期的管理

前端界面的配置，前端对象的配置

后台对象的配置
--------------------------------------------------------------------------------
面向对象编程，使用配置实现

定义配置
验证配置
使用配置
修改配置
归档配置
查询配置
配置依赖
--------------------------------------------------------------------------------

前端表现配置
pc,手机，平板，
配置名称，登录页
相对定位，文本框，账号名,数据类型文本
相对定位，密码框，账号密码，数据类型文本
发送方式：表单，ajax,fetch,axios
发送数据类型，表单，文件表单，xml,json,路径
请求类型，get,post,delete,option,put
发送数据结构，账号名，账号密码

处理响应 响应代码，响应消息，响应数据

服务端接收数据

新建接收数据
登录页接收
接收技术类型，表单，文件表单，xml,json,变量绑定，路径绑定

验证账号名是否符合要求
验证账号密码是否符合要求

根据账号名查找账号，查找数据源，数据库，缓存，先缓存，再数据库，文件

判断账号名是否存在

判断账号密码是否存在

生成访问令牌

响应数据类型，json


--------------------------------------------------------------------------------

使用配置系统来管理配置系统

这套生成其他系统的系统，是由自己配置出来的
他所有前台界面，所有存储，所有后台界面都自成体系,即使有一天代码找不到了，只要找到配置，就能很快生成原来的软件

--------------------------------------------------------------------------------

这个系统有两个功能
1生成与优化本系统（当前使用的系统是通过本身配置来实现的）
2生成其他系统 （生成其他业务系统）
--------------------------------------------------------------------------------

界面输入对象，界面输入数据
对象服务
对象生命周期管理，创建对象
对象执行动作，对象持久化
对象服务返回数据
--------------------------------------------------------------------------------

以账号为基础

账号名，密码
账号名，密码，账号类型（手机，邮箱，账号名），密码加密方式（md5,base64,aes,混合,自定义)
--------------------------------------------------------------------------------

选择架构类型
单机，集群，微服务，(其他待定)

配置项目基础框架
选择构建工具
maven,gradle

选择基础框架
spring frame work,spring boot,jfinal,ejb3,spring cloud,(vert.x,micronaut,quarkas,guice,solon)
选择基础框架版本


定义项目架构分层
controller
service
manager
viewmodel
dtomodel
domainmodel
databasemodel
repository
repositoryimpl

----------------------------------------
mvc
controller
service
databsemodel
dao

----------------------------------------

一套软件的核心就是其中业务对象生命周期的管理，
业务对象有业务对象名称，对象类型，属性，动作
每一个业务对象的状态会被存储到数据库或其他持久化介质中
在存储到持久化介质中时，业务对象会转换为持久化对象

客户在操作软件时会将数据输入到交互界面，
交互界面会将数据发送给控制层
控制层会将用户输入的数据封装为视图对象
通过视图对象可以获取到业务对象
业务对象执行不同动作就完成了对应业务
在不同服务之间传输数据时还会用到数据传输对象
数据传输对象也可以获取到业务对象
业务对象执行完不同动作完成对应业务
完成对应业务后将业务对象转换为持久化对象，将业务对象状态保存到存储中去。


viewObject 视图层对象，封装用户输入，一般用于控制层，控制层调服务层时将VO转为DTO
dataTransferObject 数据传输对象，在服务之间互相传输数据时使用，代表服务层接收与返回的数据，一般用于服务层接收与返回，在服务层会将DTO转为BO
businessObject 业务对象，针对业务设计的对象，是软件的核心，有属性，有动作，主要以执行各类动作完成业务功能，一般用于服务层，业务对象管理层，在业务对象管理层会将BO转为PO
persistentObject 持久化对象，将业务对象状态保存到持久层时需要用到的对象。


新建系统
天行后台管理系统

新建模块
系统管理模块

新建功能
账号管理功能
用户管理功能

为账号管理功能新增业务对象

账号对象

添加属性（已有对象，新建对象）
中文名称
英文名称
数据类型
是否为null
是否为空串
是否长度限制 是
是否最小长度限制 是 最小长度
是否最大长度限制 是 最大长度
备注

账号密码
同上


首先配置业务对象
再以业务对象为核心配置是否生成视图对象
是否生成管理对象，是否生成数据传输对象，是否生成持久对象
--------------------------------------------------------------
第一步配置一个最简单版本生成项目，用来生成一个简单应用生命周期，
注册，登录，角色，权限，菜单，日志，

第二步，将第一步中软件使用配置方式生成，再通过生成后的应用生成
注册，登录，角色，权限，菜单，日志，

第三步，加入其他功能模块支持

第四步，加入其他编程语言支持

第五步，在线编辑平台，免费模板与收费模板

第六步，不断增加新的设计思想配置。。。
--------------------------------------------------------------------------------


系统启动（初始化）
从数据库或缓存文件加载数据到系统缓存中。


系统运行

所有数据都装入系统运行时缓存

系统关闭

将数据写入缓存文件
缓存文件无法写入时写到数据库

这里的数据库与缓存都是分布式的

--------------------------------------------------------------------------------

服务注册与服务发现
服务分发规则
至少应当提供3个可用服务


--------------------------------------------------------------------------------
生物，之所以能够生存，是因为可以适应变化。
生物，必须依赖一个环境才能够生存，当环境持续变化至超出生物适应临界点时，生物便会死亡。
生物，只要正在生存必定要消耗能量，当能量供应达不到生物生存所需要的量时，生物便会走向死亡。

人类企图控制一切欲望，权力，金钱。却从未真正控制过生存的环境。
随着全球人类活动范围不断扩张，人类活动对环境影响日益加重。
为解决人类生存的环境问题，全球组建了气候相关协会，来推进生存环境问题。
当前环境推进面临的问题是，一方面工业产品像毒品一样不断污染环境，但给人类生活提供了便利。
人类在方便的生活环境中欲罢不能。
只有使用生物技术来对工业化产品进行替代，才可能是一个解决的出路。
使用自然的产物去为生活带来便利。而不是使用工业产物为生活带来便利。
但在生物科技发展到明天时，是否会带来更严重的污染或环境波动呢？我们现在还不得而知。

变化有些是物理上的变化，这些变化有些容易被捕捉到。
还有些是心理或思想上的变化，这些变化不容易被觉察。

生物之所以长久生存，是因为生物在不断进化，所以才能适应变化。
但是进化一般都是在同物种之间的，但也有些进化是一种物种进化成了另一种物种，
但不管是同物种进化，还是一种物种进化成了另一种物种都会在遗传信息中找到线索。


--------------------------------------------------------------------------------

资源类型
对象
属性
动作
数据

资源列表
资源

资源的资源类型

权限列表
权限

资源权限

角色列表
角色

角色权限列表

用户列表
用户

用户角色

账号列表
账号(账号类型)

用户账号


操作日志


非数据级权限
数据级权限(需要考虑新数据权限，是自动同意，还是审批，还是自动拒绝，还是符合规则同意，还是符合规则拒绝)


--------------------------------------------------------------------------------