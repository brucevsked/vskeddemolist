System has two partment  
front user interface partment  
back service process partment  

front is single partment.back is single parement.  
so we must process the Cross-Origin Resource Sharing

before you code you must know requirement and design.

--------------------------------------------------------------------------------
front user interface  

1every page has unique ID,we can't submit the page who has same pageID.  when page load finish.we can save the pageId in session store.
2validate the user input data is null? is empty,data type,min value,max value. etc.
3Object-Oriented Programming use javascript class defined the object and action like DDD
4process Cross-Origin Resource Sharing in ajax or fetch or axios
5test all code of business flow in page.
6set a switch when it is open we print the log in console.we can defined the log level,like trace,debug,error etc.
7give the use clear tips when program error or has some problem
8only use one technology push request.like jquery ajax,axios,fetch.only use one.and package it to global code;
9global data struct like {"code":"0000","msg":"user register success","data":[]}
10 monitor system, gather the environment info and show it to log
11 when monitor find error or exception send message to back system.it will send maill or alert root user
12request is asynchronism or synchronism we must know the function call traceï¼Œwhich is before,which is after

--------------------------------------------------------------------------------
back service  

1Generate the unique ID for every page.when receive the same pageId,we only process first one.the second one give tips to user can't submit same data.
2validate the user input data is null? is empty,data type,min value,max value. etc.
3Object-Oriented Programming use the class and defined the bussiness domain object like DDD
4process Cross-Origin Resource Sharing at request or intercepter or filter etc.in spring boot we can use global CorsConfig.
5test all service or domain object action .we can use memeory database(h2) and mock data.
6set a switch when it is open we can write the log in file or database.we can control the log level.(logback,log4j2)
7when code has some error or exception give message to front
8process the ajax,axios,fetch request only use one.
9response global data struct like {"code":"0000","msg":"user register success","data":[]}
10 monitor system ,gather the environment like cpu memory disk space network etc.
11 when the monitor find error or exception send message or call root user
12process the asynchronism or synchronism .we must decide by scene
