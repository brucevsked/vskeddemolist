
base标签基地址
    <!-- must set here! -->
    <base th:href="${#httpServletRequest.getScheme() + '://' + #httpServletRequest.getServerName() + ':' + #request.getServerPort()  + #request.getContextPath() + '/'} ">

前缀说明
${...} 变量引用模式

*{...} 选择表达式，一般是th:object之后，直接取Object中的属性。当没有选取对象时，其功能等同于${...}。

@{...} 链接url的表达式
动态加载src
<script th:src="@{'/static/js/project/app/bus/appModuleAdd.js?id='+${#dates.createNow()}}"></script>

#{...} i18n， 国际化

${mymap['keyaccess']} 读取map值
<input type="text" class="form-control" name="vtname" id="vtname" th:value="${data['name']}" required>

定义模板
<head th:fragment="webcss">
    <link href="/static/css/animate.css" rel="stylesheet">
</head>
使用模板
    <div th:replace="include/web/webcss :: webcss"></div>

赋值
th:field，用法：th:field="*{name}"，(用来绑定后台对象和表单数据)
th:value，用法：th:value="${brand.name}"，(用对象对name值替换value属性)
th:text, 文本显示给div或span或input赋值
th:checked 选中
整数类型时th:checked="${oldstatus==1}"
文本类型时th:checked="${oldstatus eq '1'}"




常用th标签

关键字    　　功能介绍    　　　　案例
th:id    　　替换id    　　　　  <input th:id="'xxx' + ${collect.id}"/>
th:text    　文本替换    　　　　<p th:text="${collect.description}">description</p>
th:utext    支持html的文本替换   <p th:utext="${htmlcontent}">conten</p>
th:object    替换对象    　　　　<div th:object="${session.user}">
th:value    属性赋值    　　　　<input th:value="${user.name}" />
th:with    变量赋值运算    　　　　<div th:with="isEven=${prodStat.count}%2==0"></div>
th:style    设置样式    　　　　　　　　th:style="'display:' + @{(${sitrue} ? 'none' : 'inline-block')} + ''"
th:onclick    点击事件    　　　　　　th:onclick="'getCollect()'"
th:each    属性赋值    　　　　　　　　tr th:each="user,userStat:${users}">
th:if    判断条件    　　　　　　　　<a th:if="${userId == collect.userId}" >
th:unless    和th:if判断相反    　　　　<a th:href="@{/login}" th:unless=${session.user != null}>Login</a>
th:href    链接地址    　　　　　　　　　　<a th:href="@{/login}" th:unless=${session.user != null}>Login</a> />
th:switch    多路选择 配合th:case 使用    <div th:switch="${user.role}">
th:case    th:switch的一个分支    　　　　<p th:case="'admin'">User is an administrator</p>
th:fragment    布局标签，定义一个代码片段，方便其它地方引用    <div th:fragment="alert">
th:include    布局标签，替换内容到引入的文件    <head th:include="layout :: htmlhead" th:with="title='xx'"></head> />
th:replace    布局标签，替换整个标签到引入的文件    <div th:replace="fragments/header :: title"></div>
th:selected    selected选择框 选中    th:selected="(${xxx.id} == ${configObj.dd})"
th:src    图片类地址引入    　　　　　　<img class="img-responsive" alt="App Logo" th:src="@{/img/logo.png}" />
th:inline    定义js脚本可以使用变量    <script type="text/javascript" th:inline="javascript">
th:action    表单提交的地址    　　　　<form action="subscribe.html" th:action="@{/subscribe}">
th:remove    删除某个属性    　　　　<tr th:remove="all"> 
　　　　　　　　　　　　　　　　　　　　1.all:删除包含标签和所有的孩子。
　　　　　　　　　　　　　　　　　　　　2.body:不包含标记删除,但删除其所有的孩子。
　　　　　　　　　　　　　　　　　　　　3.tag:包含标记的删除,但不删除它的孩子。
　　　　　　　　　　　　　　　　　　　　4.all-but-first:删除所有包含标签的孩子,除了第一个。
　　　　　　　　　　　　　　　　　　　　5.none:什么也不做。这个值是有用的动态评估。
th:attr    设置标签属性，多个属性可以用逗号分隔    比如 th:attr="src=@{/image/aa.jpg},title=#{logo}"，此标签不太优雅，一般用的比较少。

判断
比较运算符
gt：great than（大于）>
ge：great equal（大于等于）>=
eq：equal（等于）==
lt：less than（小于）<
le：less equal（小于等于）<=
ne：not equal（不等于）!=


<p> 提现类型:
  <span th:if="${data['cashtype']} eq 1">支付宝</span>
  <span th:if="${data['cashtype']} eq 2">微信</span>
  <span th:if="${data['cashtype']} eq 3">银行卡</span>
  <span th:if="${data['cashtype']} eq 4">信用卡</span>						
  &nbsp;&nbsp; 提现金额(单位分!):<span th:text="${data['consume']}"></span> </p>

或
<form id="fm" method="post" action="" th:if="${data ne null}">
内容
</form>

复选框或单选框
                         <input type="radio" class="i-checks" value="1" name="leveltype" th:checked="${data['level']==1}"> 1级分类
                         <input type="radio" class="i-checks" value="2" name="leveltype" th:checked="${data['level']==2}"> 2级分类
                         &nbsp;&nbsp;<input type="radio" class="i-checks" value="0" name="state" th:checked="${oldAppModule.state==0}"> 禁用
                         &nbsp;&nbsp;<input type="radio" class="i-checks" value="1" name="state" th:checked="${oldAppModule.state==1}"> 启用


下拉列表框修改回显带ajax取数据方式回显
				<input type="hidden" id="oldType1" name="oldType1" th:value="${data['type1']}" >
				<input type="hidden" id="oldType2" name="oldType2" th:value="${data['type2']}" >
		$.post('/webapi/v1/appvideotypelistbylevel',{token:$('#servertoken').val(),level:1},function (dt){
			  var tmpArray=new Array();
			  $.each(dt,function(index,el){
				  var tmpDt={id:el.id,text:el.name};
			      tmpArray.push(tmpDt);
			      if(tmpDt.id==$('#oldType1').val()){
			    	  appVideoUpdate.oldSelectedOptiont1=tmpDt;
			      }
			  });
			  $('#type1').select2({width: '60%',data: tmpArray});
			  if(appVideoUpdate.oldSelectedOptiont1!=null){
				  $('#type1').val(appVideoUpdate.oldSelectedOptiont1.id,appVideoUpdate.oldSelectedOptiont1.text).trigger("change"); 
			  }			  
		    },'json');
下拉列表框修改回显带固定下拉列表修改回显
				<input type="hidden" id="oldTargetType" name="oldTargetType" th:value="${data['targettype']}" >
		var tmpSelectOption2=null;
		$.each($('#targettype option'),function (index,el){
			if(el.value==$('#oldTargetType').val()){
				tmpSelectOption2=el;
			}
		});
		if(tmpSelectOption2!=null){
			$('#targettype').val(tmpSelectOption2.value,tmpSelectOption2.text).trigger("change"); 
		}	

表达式实用程序对象
#dates : 为 java.util.Date对象提供工具方法,比如：格式化,提取年月日等；

#calendars : 类似于#dates , 但是只针对java.util.Calendar对象；

#numbers : 为数值型对象提供工具方法；

#strings :为String 对象提供工具方法。如: contains, startsWith, prepending/appending等；

#objects : 为object 对象提供常用的工具方法；

#bools : 为boolean 对象提供常用的工具方法；

#arrays : 为arrays 对象提供常用的工具方法；

#lists :为lists对象提供常用的工具方法；

#sets : 为sets对象提供常用的工具方法；

#maps : 为maps对象提供常用的工具方法；

#aggregates :为创造一个arrays 或者 collections聚集函数提供常用的工具方法；

#messages :用于在变量表达式中获得外部消息的实用方法，与使用#{...}语法获得的方式相同；

#uris：用于在Thymeleaf标准表达式中执行URI / URL操作（特别是转义/消除转义）的实用对象；

#conversions：允许在模板的任意位置执行转换服务的实用程序对象；

#ids : 为可能需要循环的ID属性提供常用的工具方法。
