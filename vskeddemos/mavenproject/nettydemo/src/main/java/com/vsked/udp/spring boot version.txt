package com.yunze.udp;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioDatagramChannel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import javax.annotation.PostConstruct;

@Component
public class UDPServer {

    private static final Logger log = LoggerFactory.getLogger(UDPServer.class);

    @Value("${udp.server.port}")
    private int port;

    private EventLoopGroup group;

    @PostConstruct
    public void start() {
        new Thread(this::run, "UDP-Server-Thread").start();
    }

    private void run() {
        group = new NioEventLoopGroup();
        try {
            Bootstrap bootstrap = new Bootstrap();
            bootstrap.group(group)
                     .channel(NioDatagramChannel.class)
                     .option(ChannelOption.SO_BROADCAST, true)
                     .handler(new ChannelInitializer<NioDatagramChannel>() {
                         @Override
                         protected void initChannel(NioDatagramChannel ch) {
                             ch.pipeline().addLast(new UDPServerHandler());
                         }
                     });

            ChannelFuture future = bootstrap.bind(port).sync();
            log.info("UDP Server 启动，监听端口: {}", port);

            // 阻塞直到 channel 关闭
            future.channel().closeFuture().sync();
        } catch (InterruptedException e) {
            log.error("UDP Server 异常中断", e);
        } finally {
            group.shutdownGracefully();
        }
    }
}


package com.yunze.udp;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.socket.DatagramPacket;
import io.netty.util.CharsetUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UDPServerHandler extends SimpleChannelInboundHandler<DatagramPacket> {

    private static final Logger log = LoggerFactory.getLogger(UDPServerHandler.class);

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket packet) {
        // 获取接收到的数据
        String received = packet.content().toString(CharsetUtil.UTF_8);
        log.info("收到 UDP 消息: {}", received);

        // 原样响应给发送方
        ByteBuf response = Unpooled.copiedBuffer(received.getBytes(CharsetUtil.UTF_8));
        ctx.writeAndFlush(new DatagramPacket(response, packet.sender()));
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        log.error("----------UDPServer出现异常", cause);
        ctx.close();
    }
}
