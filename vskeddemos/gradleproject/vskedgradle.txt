--------------------------------------------------------------------------------
在这里搜索插件
https://plugins.gradle.org/
应用插件老写法，不要用这个了
apply plugin: 'io.spring.dependency-management'
应用插件新写法，用这个
plugins {
    id "java"
    id "org.springframework.boot" version "2.2.6.RELEASE"
    id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply true
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.RELEASE"
    }
}
--------------------------------------------------------------------------------
排除包
configurations {
    //remove default logger
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}
--------------------------------------------------------------------------------

引入大于版本号
implementation 'org.mockito:mockito-core:3.+'
--------------------------------------------------------------------------------
定义公共变量与使用
buildscript{
    ext{
        slf4jVersion='1.7.30'
        log4j2Version='2.13.1'
    
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:$slf4jVersion'
    implementation 'org.apache.logging.log4j:log4j-core:$log4j2Version'
    implementation 'org.testng:testng:7.1.0'
}
--------------------------------------------------------------------------------
Gradle properties
org.gradle.caching=(true,false)
org.gradle.caching.debug=(true,false)
org.gradle.configureondemand=(true,false)
org.gradle.console=(auto,plain,rich,verbose)
org.gradle.daemon=(true,false)
org.gradle.daemon.idletimeout=(# of idle millis)
org.gradle.debug=(true,false)
org.gradle.java.home=(path to JDK home)
org.gradle.jvmargs=(JVM arguments)
org.gradle.logging.level=(quiet,warn,lifecycle,info,debug)
org.gradle.parallel=(true,false)
org.gradle.warning.mode=(all,fail,summary,none)
org.gradle.workers.max=(max # of worker processes)
org.gradle.priority=(low,normal)
--------------------------------------------------------------------------------
关键字解释说明
api 引入传递:引入当前包与它下面所有子包。编译传递：当子包重新修改时会重新编译子包与当前包
implemention 引入传递:只引入当前包,不引入他下面所有子包。编译传递：当子包修改时不会重新编译子包与当前包

repositories 仓库引入
repositories {
    //Maven中心库(http://repo1.maven.org/maven2)
    mavenCentral()

    //本地库，local repository(${user.home}/.m2/repository)
    mavenLocal()

    //指定库
    maven {
        url "http://repo.mycompany.com/maven2"
    }

    //指定库
    mavenRepo name: reponame', url: "http://repo.mycompany.com/maven2"

    //指定库
    maven {
        // Look for POMs and artifacts, such as JARs, here
        url "http://repo2.mycompany.com/maven2"
        // Look for artifacts here if not found at the above location
        artifactUrls "http://repo.mycompany.com/jars"
        artifactUrls "http://repo.mycompany.com/jars2"
    }

    //带认证的库
    maven {
        credentials {
            username 'user'
            password 'password'
        }
        url "http://repo.mycompany.com/maven2"
    }
}

JCenter() 与 mavenCenter() 的区别
网络上有两种Maven仓库，分别是mavenCenter()和jCenter():
1. Maven Central 则是由sonatype.org维护的Maven仓库。
http://jcenter.bintray.com/
2. jcenter是一个由 bintray.com维护的Maven仓库。
https://oss.sonatype.org/content/repositories/releases/
maven中央仓库已经将内容浏览功能禁掉了，可在这个网站查询
http://search.maven.org/
建议使用jcenter
jcenter在性能和占存储大小方面比mavenCentral更优
--------------------------------------------------------------------------------
安装gradle
下载gradle
https://gradle.org/

解开压缩包到
D:\Program Files\gradle
注意解开以后把版本号删除，这样下次升级就可以直接覆盖了

配置环境变量
GRADLE_HOME
D:\Program Files\gradle

path环境变量中新添加一条
%GRADLE_HOME%\bin

开一个cmd测试gradle是否安装成功
gradle -v


文件扩展名为.gradle基本结构如下

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

dependencies {
   //可以为外部识别的用api不可以被外部识别的用implementation
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    api 'org.elasticsearch:elasticsearch:7.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

myeclipse中插件用buildship Gradle integration