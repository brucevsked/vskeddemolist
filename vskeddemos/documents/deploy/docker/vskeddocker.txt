
win10 下载以后环境存放路径
C:\Users\Public\Documents\Hyper-V\Virtual hard disks

centos7安装docker

docker安装
安装储存设备映射包
yum install -y yum-utils device-mapper-persistent-data lvm2
添加docker软件镜像
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
安装dockerCE
yum install -y docker-ce
启动docker
systemctl start docker
自动启动docker
systemctl enable docker
查看状态
systemctl status docker
重启docker服务
systemctl daemon-reload
systemctl restart docker.service

加快拉取镜像
vi /etc/docker/daemon.json
{
  "registry-mirrors": ["https://hub-mirror.c.163.com"]
}
如果需要添加一个私有的仓库reg.docker.tb以同样的方法
{
    "insecure-registries":["reg.docker.tb"],
    "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn/"]
}
20250506可以使用的docker仓库

{
  "registry-mirrors": ["https://docker.1ms.run"]
}

docker pull docker.1ms.run/library/redis:latest
docker pull docker.1ms.run/emqx/emqx:latest

docker run -d --name emqx -p 18083:18083 -p 12387:1883 emqx/emqx:latest

安装docker-compose(集群管理)Compose 是用于定义和运行多容器 Docker 应用程序的工具
yum install -y epel-release
yum install -y python-pip
pip install --upgrade pip
pip install docker-compose
查看版本
docker-compose -version


安装docker-compose新版
sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

docker-compose --version


创建子网段
docker network create --subnet=10.0.192.0/24 docker-net

安装redis
搜索组件
docker search redis
拉取redis镜像
docker pull redis:latest
准备redis.conf
mkdir -p /usr/local/redis/conf
cd /usr/local/redis/conf
wget https://raw.githubusercontent.com/antirez/redis/5.0.3/redis.conf -O /usr/local/redis/conf/redis.conf 

修改配置文件
vim conf/redis.conf
修改内容(修改以下三项,其他不变)
bind 0.0.0.0  #所有IP都可以访问
protected-mode no # 关闭保护模式
appendonly yes
放行端口号
firewall-cmd --zone=public --add-port=6379/tcp --permanent
firewall-cmd --reload
创建并启动容器
docker run --net host -v /data/redis/redis6379:/data -v /data/config/redis6379/redis.conf:/usr/local/etc/redis/redis.conf --name redis10 -d redis:latest redis-server /usr/local/etc/redis/redis.conf

命令详解
-p 6379:6379:端口映射
-v /usr/local/redis/conf/redis.conf: /usr/local/etc/redis/redis.conf ：把宿主机配置好的redis.conf放到容器中
-v /usr/local/redis/data:/data：把redis持久化的数据在宿主机内显示,做数据备
份
redis-server  /usr/local/etc/redis/redis.conf     让redis按照redis.conf的配置启动
–appendonly yes   redis启动后数据持久化

连接redis
docker exec -it redis redis-cli


1* 下载镜像
docker pull 名称:tag

docker pull hub.c.163.com/nce2/ubuntu:16.04

2* 查看版本
docker version
docker --version
docker -v

3* 查看当前镜像列表
docker images

查看镜像详细信息
docker image inspect 镜像id
docker image inspect fc99158db54a
删除docker基础镜像
先用 查看镜像列表
docker images
再用 删除基础镜像
docker rmi -f 镜像ID
示例
docker rmi -f f9b990972689
docker rmi -f 镜像名称
docker rmi -f nvtienanh/hadoop-resourcemanager

删除成功后再用 检查删除结果
docker images

4* 查看当前docker信息
docker info

5* 运行的容器信息
docker ps

查看当前容器列表
docker ps -a

6* 进入容器中执行操作
docker run -it repository名称:tag /bin/bash
docker run -it hub.c.163.com/nce2/ubuntu:16.04 /bin/bash
docker run -it ubuntu-upstart:latest /bin/bash

docker exec -it <容器ID或名称> bash

7* 删除镜像
docker rmi repository名称
docker rmi mysql

8* 使用镜像创建新实例
docker create --name 示例名 -p 主机端口:容器端口 respository名称
docker create --name dev_tomcat -p 8080:8080 rossbachp/apache-tomcat8

docker create --name dev_mysql -p 3306:3306 mysql/mysql-server
docker create --name dev_mysql1 -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql/mysql-server

9* 搜索镜像
docker search 组件名
docker search tomcat8
查看latest版本(使用前先要将镜像拉下来)
docker image inspect zookeeper:latest|grep i version
如果不行就查看详细信息，在详细信息里找
docker image inspect zookeeper:latest

10* 分配一个终端(进入docker)
docker exec -i -t 容器名称/容器id /bin/bash
docker exec -i -t 24e6fd60d600 /bin/bash
docker exec -i -t  mynginx /bin/bash
docker exec -i -t myredis /bin/bash
docker exec -i -t webadmin /bin/bash
直接执行容器内相关命令
docker exec -i kafka1 sh -c 'ls /opt'

11* 创建子网及网络相关
docker network create --subnet=子网网段/子网掩码 网络名称
docker network create --subnet=192.168.101.0/24 docker-net

docker network COMMAND
子命令	说明
docker network connect	将容器连接到网络。
docker network create	创建新的 Docker 网络。默认情况下，在 Windows 上会采用 NAT 驱动，在 Linux 上会采用Bridge 驱动。可以使用 -d 参数指定驱动（网络类型）。
docker network disconnect	断开容器的网络。docker network disconnect -f 网络名 容器名
docker network disconnect -f mydockeroverlay1 redis13
docker network inspect	提供 Docker 网络的详细配置信息。docker inspect name(容器名/镜像名)
docker network ls	用于列出运行在本地 Docker 主机上的全部网络。
docker network prune	删除 Docker 主机上全部未使用的网络。
docker network rm	删除 Docker 主机上指定网络。

创建一个网段
docker network create --subnet=10.0.192.0/24 docker-net

启动容器时指定网段
docker run --restart=always --net docker-net --ip 10.0.192.88 \
        -p 2181:2181 \
        -p 2888:2888 -p 3888:3888 \
        -p 44641:44641 \
        -v /data/zookeeper/zk0/data:/data \
        -v /data/zookeeper/zk0/data/logs:/datalog \
        -v /data/config/zookeeper/zk0/zoo.cfg:/conf/zoo.cfg \
        --name zk0 -d zookeeper:latest

12* 运行容器
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
OPTIONS说明：
-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项
-d: 后台运行容器，并返回容器ID
-i: 以交互模式运行容器，通常与 -t 同时使用
-P: 随机端口映射，容器内部端口随机映射到主机的高端口
-p: 指定端口映射，格式为：主机(宿主)端口:容器端口 这个参数可以配置端口范围段如6000-6200:6000-6200
-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用
--name="nginx-lb": 为容器指定一个名称
--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致
--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致
-h "mars": 指定容器的hostname
-e username="ritchie": 设置环境变量
--env-file=[]: 从指定文件读入环境变量
--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行
-m :设置容器使用内存最大值
--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型
--link=[]: 添加链接到另一个容器
--expose=[]: 开放一个端口或一组端口
--volume , -v: 绑定一个卷

示例1创建并启动redis
docker run -p 主机端口:容器端口 -v 主机路径:容器路径(把redis持久化的数据在宿主机内显示,做数据备份) -v 主机配置文件:容器配置文件 --privileged=true(容器内真正root权限) --name 容器名称 -d(后台运行返回容器id) 运行指定配置文件
docker run -p 6379:6379 -v /usr/local/redis/data:/data -v /usr/local/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf --privileged=true  --name redis -d redis redis-server /usr/local/etc/redis/redis.conf

在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启
docker run --restart=always
如果已经启动了则可以使用如下命令
docker update --restart=always <CONTAINER ID>

docker run --restart=always --net docker-net --ip 192.168.101.10 --name mymysql -d -p 6111:3306 -v /data/mysql_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=Y4yhl9tbf120_ mysql mysqld --default-authentication-plugin=mysql_native_password&&
docker run --restart=always --net docker-net --ip 192.168.101.12 -d -e FASTDFS_IPADDR=192.168.101.12 -p 8888:8888 -p 22122:22122 -p 23000:23000 -p 8011:80 -v /data/dfs_data:/home/dfs --name fastdfs myfastdfs&&
docker run --restart=always --net docker-net --ip 192.168.101.11 --name myredis -d -p 6379:6379 redis redis-server --requirepass TWVtUPD2mpmcOET2&&
docker run --restart=always --net docker-net --ip 192.168.101.13 --name myim -d -p 8001:8001 myim /usr/local/nginx/sbin/nginx&&
docker run --restart=always --name webapi20 -d -p 9011:9010 --net docker-net --ip 192.168.101.20 -v /data/app/logs20:/logs -v /data/appserveruser-1.0.0.jar:/appserveruser-1.0.0.jar b84359d0cbce java -jar /appserveruser-1.0.0.jar&&
docker run --restart=always --name webapi21 -d -p 9012:9010 --net docker-net --ip 192.168.101.21 -v /data/app/logs21:/logs -v /data/appserveruser-1.0.0.jar:/appserveruser-1.0.0.jar b84359d0cbce java -jar /appserveruser-1.0.0.jar&&
docker run --restart=always --name webadmin -d -p 9080:9080 --net docker-net --ip 192.168.101.14 -v /data/app/logs:/logs -v /data/appserverwebadmin.jar:/appserverwebadmin.jar b84359d0cbce java -jar /appserverwebadmin.jar&&
docker run --restart=always --name mynginx --net docker-net --ip 192.168.101.15 -d -p 80:80 -v /data/proxy_data/logs:/var/log/nginx/ -v /data/proxy_data/conf/:/etc/nginx/conf/ nginx /usr/sbin/nginx -c /etc/nginx/conf/nginx.conf -g 'daemon off;' 


13* docker镜像启动、停止、重启

docker start :启动一个或多个已经被停止的容器
docker stop :停止一个运行中的容器
docker restart :重启容器

14* 删除docker容器
先找到要删除的容器id
docker ps -a
docker rm 容器id

停止所有容器
docker stop $(docker ps -a -q)

删除所有容器
docker rm $(docker ps -a -q)

15* 跨主机overlay网络
Docerk overlay 网络需要一个 key-value 数据库用于保存网络状态信息，包括 Network、Endpoint、IP 等，Consul、Etcd 和 ZooKeeper 都是 Docker 支持的 key-vlaue 软件。在这里介绍etcd以及console两种数据库的搭建方法！
搭建etcd数据库
第一步：在docker01上运行如下命令
yum install etcd
vi /usr/lib/systemd/system/etcd.service
vi /etc/etcd/etcd.conf

rm -rf /var/lib/etcd/default.etcd
systemctl daemon-reload
systemctl start etcd

etcd --name docker01 --initial-advertise-peer-urls http://10.0.192.10:2380 \
--listen-peer-urls http://10.0.192.10:2380 \
--listen-client-urls http://10.0.192.10:2379,http://127.0.0.1:2379 \
--advertise-client-urls http://10.0.192.10:2379 \
--initial-cluster-token etcd-cluster \
--initial-cluster docker01=http://10.0.192.10:2380,docker02=http://10.0.192.20:2380 \
--initial-cluster-state new

第二步：在docker02上执行如下命令
cd /usr/local/src/
yum install etcd
etcd --name docker02 --initial-advertise-peer-urls http://10.0.192.20:2380 \
--listen-peer-urls http://10.0.192.20:2380 \
--listen-client-urls http://10.0.192.20:2379,http://127.0.0.1:2379 \
--advertise-client-urls http://10.0.192.20:2379 \
--initial-cluster-token etcd-cluster \
--initial-cluster docker01=http://10.0.192.10:2380,docker02=http://10.0.192.20:2380 \
--initial-cluster-state new

第三步：分别在两个节点检查etcd cluster状态
#在docker01上检查
etcdctl cluster-health
member 21530c593b6325d7 is healthy: got healthy result from http://10.0.192.10:2379
member f4d46a04f640940c is healthy: got healthy result from http://10.0.192.20:2379
cluster is healthy

#在docker02上检查
etcdctl cluster-health
member 21530c593b6325d7 is healthy: got healthy result from http://10.0.192.10:2379
member f4d46a04f640940c is healthy: got healthy result from http://10.0.192.20:2379
cluster is healthy

第四步：修改/etc/docker/daemon.json配置文件
#docker01修改后内容如下
{
  "registry-mirrors": ["https://f0lt06pg.mirror.aliyuncs.com"],
  "dns": ["1.1.1.1","114.114.114.114"],
  "data-root": "/data/docker",
  "cluster-store": "etcd://10.0.192.10:2379",
  "cluster-advertise": "10.0.192.10:2375"
}


#docker02修改后内容如下
{
  "registry-mirrors": ["https://f0lt06pg.mirror.aliyuncs.com"],
  "dns": ["1.1.1.1","114.114.114.114"],
  "data-root": "/data/docker",
  "cluster-store": "etcd://10.0.192.20:2379",
  "cluster-advertise": "10.0.192.20:2375"
}

第五步：重启docker服务
systemctl daemon-reload
systemctl restart docker.service

创建overlay网络
第一步：在docker01上创建一个damo的overlay network
docker network ls
docker network create --subnet=10.0.193.0/24 -d overlay mydockeroverlay1
docker network ls
第二步：已经可以在node2上看到这个overlay网络了
docker network ls
第三步：查看demo网络的详细信息
docker network inspect mydockeroverlay1
第三步：如果是通过etcd创建的，可以查看etcd的key-value
etcdctl ls

overlay网络使用案例介绍
这里就使用第一章节的flask-redis来做实验，在docke01上部署redis容器，在docker02上部署app容器，并保证能正常运行！
第一步：在docker01上运行redis容器，并加入到demo网络
docker run -d --name redis --network demo redis

第二步：在docker02上运行flask-redis容器，也加入到demo网络
docker run -d -p 5000:5000 --network demo -e REDIS_HOST=redis --name flask-redis flask-redis
第三步：访问docker02的5000端口，查看结果。如果出现和第一章相同结果，说明跨主机网络已互通！

16* 查看docker日志
docker logs 容器名称或id
docker logs kafka1
docker logs nacosserver >> /logs/nacosserver.log
查看最近30分钟的日志
docker logs --since 30m CONTAINER_ID
docker logs --since 30m 992adf083c14
查看某时间之后的日志
docker logs -t --since="2018-02-08T13:23:37" CONTAINER_ID

查看某时间段日志
docker logs -t --since="2018-02-08T13:23:37" --until "2018-02-09T12:23:37" CONTAINER_ID
查看指定时间后的日志，只显示最后100行
docker logs -f -t --since="2018-02-08" --tail=100 CONTAINER_ID

17* docker镜像迁移,将本地docker容器迁移到服务端
从docker容器生成镜像
docker commit -a "zhaoolee" -m “完成uwsgi的配置” qs zhaoolee-qs:1.0
将docker镜像导出为静态文件
docker save zhaoolee-qs:1.0 > qs01.tar
通过将scp将静态文件发送到服务端
scp ./qs01.tar root@192.168.214.162:/qs01.tar
将静态文件还原为镜像, 并导入docker
docker load < qs01.tar
从刚刚导入的镜像新建容器
docker run --net host -v /data/redis/redis6379:/data -v /data/config/redis6379/redis.conf:/usr/local/etc/redis/redis.conf --name redis10 -d zhaoolee-qs:1.0 redis-server /usr/local/etc/redis/redis.conf

18* 复制容器内文件夹到宿主
docker cp 容器名:要拷贝的文件在容器里面的路径 要拷贝到宿主机的相应路径 
示例
docker cp hadoop3a:/opt/hadoop-3.2.1 /tmp/hadoop3a








Docker-----四种网络模式
我们在使用docker run创建Docker容器时，可以用--net选项指定容器的网络模式，Docker有以下4种网络模式：
· host模式，使用--net=host指定。
· container模式，使用--net=container:NAME_or_ID指定。
· none模式，使用--net=none指定。
· bridge模式，使用--net=bridge指定，默认设置。
· overlay模式，使用--net=overlay指定
1 host模式
Docker使用的网络实际上和宿主机一样，在容器内看到的网卡ip是宿主机上的ip。
众所周知，Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。

2 container模式 
多个容器使用共同的网络看到的ip是一样的。
在理解了host模式后，这个模式也就好理解了。这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。

3 none模式
这种模式下不会配置任何网络。
这个模式和前两个不同。在这种模式下，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。

4 bridge模式
bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。
类似于Vmware的nat网络模式。同一个宿主机上的所有容器会在同一个网段下，相互之间是可以通信的。

5 overlay模式
容器在两个跨主机进行通信的时候，是使用overlay network这个网络模式进行通信，如果使用host也可以实现跨主机进行通信，直接使用这个物理的ip地址就可以进行通信。overlay它会虚拟出一个网络比如10.0.9.3这个ip地址，在这个overlay网络模式里面，有一个类似于服务网关的地址，然后把这个包转发到物理服务器这个地址，最终通过路由和交换，到达另一个服务器的ip地址。


docker run --name consul1 -d -p 8500:8500 -p 8600:8600 -v /data/consul:/consul/data consul:latest

docker run -p 389:389 --name openldap --restart=always --env LDAP_ORGANISATION="vskedtest" --env LDAP_DOMAIN="vskedtest.com" --env LDAP_ADMIN_PASSWORD="Y4yhl9tbf110" --detach osixia/openldap
可以看到启动命令中都是以ENV环境把变量注入到容器中的。

389端口：默认ldap服务是使用389端口
LDAP_ORGANISATION 表示ldap的机构组织
LDAP_DOMAIN 配置LDAP域
LDAP_ADMIN_PASSWORD 配置LDAP管理员(admin)的密码
默认用登陆用户名admin

docker pull ldapaccountmanager/lam

docker run -d --restart=always --name ldap-account-manager -p 80:80 \
        --link openldap:ldap-host \
        --env PHPLDAPADMIN_LDAP_HOSTS=ldap-host \
        --env PHPLDAPADMIN_HTTPS=false \
        --detach ldapaccountmanager/lam

--link这里连接到openldap容器并起了一个别名ldap-host
PHPLDAPADMIN_LDAP_HOSTS这里直接通过别名指向openldap容器，这样不需要写死IP地址
PHPLDAPADMIN_HTTPS 不使用443协议
--restart=always加入此参数是防止系统重启了容器未启动。[需要把docker服务开机启动]

当多个容器依赖时，只需要给依赖尾部添加开机启动即可
如b容器需要连接a容器,a<-b 这时候只需要给b添加开机启动即会自动启动a容器


--------------------------------------------------------------------------------
docker 安装mysql
拉取镜像
docker pull mysql
制作数据目录
mkdir -p /data/mysql/data
mkdir -p /data/mysql/log
启动镜像单行版本
docker run --restart=always --name mymysql -d -p 3306:3306 -v /data/mysql/data:/var/lib/mysql:rw -v /data/mysql/log:/var/log/mysql:rw -v /etc/localtime:/etc/localtime:ro -e MYSQL_ROOT_PASSWORD=Y4yhl9tbf110_ mysql mysqld --default-authentication-plugin=mysql_native_password
启动镜像多行版本
docker run --restart=always --name mymysql -d -p 3306:3306 \
    -v /data/mysql/data:/var/lib/mysql:rw \
    -v /data/mysql/log:/var/log/mysql:rw \
    -v /etc/localtime:/etc/localtime:ro \
    -e MYSQL_ROOT_PASSWORD=Y4yhl9tbf110_ mysql mysqld \
    --default-authentication-plugin=mysql_native_password

初始化创建数据库(做统一初始化脚本时用，跟上同要一起用，不然就要把密码写上)
until docker exec -i mymysql sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE vskedtest DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci"' \
do \
  echo "wait" \
done
单独执行版本写法
docker exec -i mymysql sh -c 'exec mysql -uroot -p"Y4yhl9tbf110_" -e "CREATE DATABASE vskedtest DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci"'

初始化数据库(做统一初始化脚本时用，跟上同要一起用，不然就要把密码写上)
docker exec -i mymysql sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" appserverdev' < /opt/sql/appserverdev.sql

--------------------------------------------------------------------------------

docker修改主机名 也就是hosts文件
先查看容器详情
docker inspect zk0
找到其中的
HostnamePath跟HostsPath
记下路径
        "HostnamePath": "/var/lib/docker/containers/7c1a582477377d99edc2bf9980c8b10dce93c1eca71a7cde6a2569848f126965/hostname",
        "HostsPath": "/var/lib/docker/containers/7c1a582477377d99edc2bf9980c8b10dce93c1eca71a7cde6a2569848f126965/hosts",
还有一个文件是config.v2.json
在容器详情里找到容器唯一标识记下来
"Id": "7c1a582477377d99edc2bf9980c8b10dce93c1eca71a7cde6a2569848f126965",
查找容器配置文件
find / -name "config.v2.json"
/var/lib/docker/containers/7c1a582477377d99edc2bf9980c8b10dce93c1eca71a7cde6a2569848f126965/config.v2.json

也可以不用查找容器标识，直接进入这个路径跟上面主机名都在一个目录下面
/var/lib/docker/containers/7c1a582477377d99edc2bf9980c8b10dce93c1eca71a7cde6a2569848f126965/


先备份下原始文件
cd /var/lib/docker/containers/7c1a582477377d99edc2bf9980c8b10dce93c1eca71a7cde6a2569848f126965/
cp config.v2.json config.v2.json.bak
cp hostname hostname.bak
cp hosts hosts.bak

备份完以后使用vi或拉出文件修改就可以了

--------------------------------------------------------------------------------
