特别注意!
mysql在建数据库时应当使用utf8mb4字符集以防止emoji表情等4字节插入失败
CREATE DATABASE appserverdev DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

恢复数据前提
在/etc/my.cnf文件里的[mysqld]区块添加：
log-bin=mysql-bin
然后重启mysql服务
查看日志状态
show variables like 'log_%'; 


查看当前表行存储格式
SHOW TABLE STATUS LIKE '表名'
InnoDB行存储格式说明 做搜索查询量大的表一般都以空间来换取时间，设计成静态表
[文件格式]行存储格式 说明
[Antelope]Redundant 为兼容5.1版本前设计 不建议
[Antelope]Compact 高效存放数据 一个页中存放的行数据越多，其性能就越高
[Barracuda]Compressed 对于BLOB、TEXT、VARCHAR这类大长度类型的数据能进行非常有效的存储（存储的行数据会以zlib算法进行压缩）将data、index、pages进行压缩，但buffer pool中的pages则不压缩
[Barracuda]Dynamic 若一张表里面存在varchar、text以及其变形、blob以及其变形的字段的话，那么张这个表其实也叫动态表
Fixed 固态一张表里面不存在varchar、text以及其变形、blob以及其变形的字段的话，那么张这个表其实也叫静态表其优点读取快，缺点浪费额外一部分空间



1*view all database 查看所有数据库
show databases

2* enter database 切换当前使用的库
use [databasename]

3* login mysql 登陆mysql
mysql -u用户名 -p密码
mysql -uroot -p666666


4* view mysql user host 查看用户与主机
select host,user from mysql.user

5* modify root password 修改密码
mysql 5.6以前
 UPDATE mysql.user SET password=PASSWORD('newpassword') WHERE User='root';
 FLUSH PRIVILEGES;

 UPDATE mysql.user SET password=PASSWORD('666666') WHERE User='root';
 mysql5.7
 UPDATE mysql.user SET authentication_string=PASSWORD('666666') WHERE User='root';
mysql 8.x
ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';

6* view all tables 查看所有表
show tables;

7* view table construct 查看表结构
desc [tablename]

8* set remote access 设置远程访问
use mysql;
update user set host = '%' where user = 'root';
select host from user where user = 'root';
grant all  on *.* to 'root'@'%' ;
flush privileges; 

9* create database 创建数据库
create database [databaseName]

CREATE DATABASE appserverdev DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

10* show mysql engine  显示数据库引擎
show engines;

11* show process 显示进程列表
show full processlist
show processlist

12* alter column name in table 修改列
alter table [tablename] change [oldColumnName] [newColumnName]

alter table userT change usName userName
alter table userT change usName userName varchar(200);

13* insert one table to another table 将一个表数据插入另一张表
insert into t2(name,age) select myName,myId from t1

14* 查看版本
show variables like 'version'

15* 创建用户
CREATE USER 'test'@'%' IDENTIFIED BY 'test'; 

16* 授权用户访问所有
GRANT ALL ON *.* TO 'test'@'localhost' identified by 'Y4yhl9tbf110'; 
GRANT ALL ON *.* TO 'test'@'%' identified by 'Y4yhl9tbf110'; 
grant all privileges on birdeggproto1 to 'birdeggproto1t'@'%' ;
grant all  on helthmanager.* to 'helthmanager'@'%' ;

17* 显示建表语句
show create table 表名

18* 显示表索引
show index from 表名

19* 创建索引
ALTER TABLE `表名` ADD INDEX 索引名 ( `列名` )

创建联合唯一索引并清除重复记录
alter ignore table user add unique index(user_id,user_name);
它会删除重复的记录（别怕，会保留一条），然后建立唯一索引，高效而且人性化.
建表时添加
CONSTRAINT uidvideoid UNIQUE (uid ,videoid )


20* 显示了mysql如何使用索引来处理select语句以及连接表

explain 要执行的sql语句

explain列的解释
table：显示这一行的数据是关于哪张表的

type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和all

possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从where语句中选择一个合适的语句

key： 实际使用的索引。如果为null，则没有使用索引。很少的情况下，mysql会选择优化不足的索引。这种情况下，可以在select语句中使用use index（indexname）来强制使用一个索引或者用ignore index（indexname）来强制mysql忽略索引

key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好

ref：显示索引的哪一列被使用了，如果可能的话，是一个常数

rows：mysql认为必须检查的用来返回请求数据的行数

extra：关于mysql如何解析查询的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是using temporary和using filesort，意思mysql根本不能使用索引，结果是检索会很慢


extra列返回的描述的意义

distinct:一旦mysql找到了与行相联合匹配的行，就不再搜索了

not exists: mysql优化了left join，一旦它找到了匹配left join标准的行，就不再搜索了

range checked for each record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，mysql检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一

using filesort: 看到这个的时候，查询就需要优化了。mysql需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行

using index: 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候

using temporary 看到这个的时候，查询需要优化了。这里，mysql需要创建一个临时表来存储结果，这通常发生在对不同的列集进行order by上，而不是group by上

where used 使用了where从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型all或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）

system 表只有一行：system表。这是const连接类型的特殊情况

const:表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为mysql先读这个值然后把它当做常数来对待

eq_ref:在连接中，mysql在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用

ref:这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好

range:这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西时发生的情况

index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比all更好，因为索引一般小于表数据）

all:这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免

explain select * from statuses_status where id=11;

21*使用数据库
use[数据库名]

use helthmanager;

22* 添加列
alter table 表名 add column 列名 varchar(30);
alter table oa_journal add column workRole varchar(64);

23* 删除列
alter table 表名 drop column 列名;
alter table oa_journal drop column workRole;

24* 使用慢查询

在my.ini中：

long_query_time=3

log-slow-queries=d:\mysql5\logs\mysqlslow.log

把超过3秒的记录在慢查询日志中

可以用mysqlsla来分析之。也可以在mysqlreport中，有如

DMS分别分析了select ,update,insert,delete,replace等所占的百份比

25* 查看分区与数据
SELECT 
  partition_name part,  
  partition_expression expr,  
  partition_description descr,  
  table_rows  
FROM 
  INFORMATION_SCHEMA.partitions  
WHERE 
  TABLE_SCHEMA = schema()  
  AND TABLE_NAME='表名';  


26* 获取UUID
select replace(uuid(),'-','') as myuuid from dual;

27* 连接两列或多个字符串 有时会在mybatis中用
CONCAT(str1,str2,…)
select concat('a','b','c');


28* 正则表达式

select * from testphone where phoneNum REGEXP '2$';

29* 误删除数据恢复 误delete恢复
第一步先将当前数据库同步到本地一份取名跟线上名字一样
第二步下载binlog文件
第三步解压
找到本地mysql的bin目录并用cmd进入
c:
cd C:\Program Files\MySQL\MySQL Server 5.6\bin>
mysqlbinlog.exe --no-defaults --database=bosspay_bill --start-datetime="2018-01-02 6:13:00" --stop-datetime="2018-01-02 12:13:00" --skip-gtids=true f:\vskedtestmysql\mysql-bin.000270 > f:\vskedtestmysql\resultvsa1.sql
mysql.exe -uroot -p密码 < f:\vskedtestmysql\resultvsa1.sql

本地查看
基于开始/结束时间
mysqlbinlog --start-datetime='2013-09-10 00:00:00' --stop-datetime='2013-09-10 01:01:01' -d 库名 二进制文件

基于pos值
mysqlbinlog --start-postion=107 --stop-position=1000 -d 库名 二进制文件

转换为可读文本
mysqlbinlog –base64-output=DECODE-ROWS -v -d 库名 二进制文件 >d:/cc.sql


30* 字符串转日期

select str_to_date('2018-04-02 15:3:28','%Y-%m-%d %H:%i:%s');

31* 显示所有用户
 select user,host from mysql.user;

32* 日期格式化
DATE_FORMAT(date,format)
select DATE_FORMAT(NOW(),'%Y-%m-%d');
select DATE_FORMAT(NOW(),'%Y-%m-%d %H:%i:%S');
select * from appUserBalanceHisT where DATE_FORMAT(CURRENT_TIMESTAMP,'%Y-%m-%d')=DATE_FORMAT(addtime,'%Y-%m-%d');

33* 查看是否开启恢复日志bin-log日志
 show variables like 'log_bin';
flush logs; 会多一个最新的bin-log日志
show master status; 查看最后一个bin-log日志的相关信息
reset master; 清空所有的bin-log日志

34* 行列转换，列转行


create table testColumnToRow(
cMonth varchar(32), -- 月份
cName  varchar(32), -- 名称
cSum int  -- 数量
);

insert into testColumnToRow(cMonth,cName,cSum) values('1月','远特普通号卡',300);
insert into testColumnToRow(cMonth,cName,cSum) values('1月','远特普通号卡',10);
insert into testColumnToRow(cMonth,cName,cSum) values('1月','国美普通号卡',200);
insert into testColumnToRow(cMonth,cName,cSum) values('1月','迪加普通号卡',100);

insert into testColumnToRow(cMonth,cName,cSum) values('2月','远特普通号卡',320);
insert into testColumnToRow(cMonth,cName,cSum) values('2月','国美普通号卡',220);
insert into testColumnToRow(cMonth,cName,cSum) values('2月','迪加普通号卡',120);

select * from testColumnToRow;

SELECT cName,cMonth ,sum(cSum)  AS "mysum" FROM   testColumnToRow GROUP  BY cName,cMonth;

drop table testColumnToRow;

34* 行列转换，行转列
create table testRowToColumn(
cMonth varchar(32), -- 月份
cYuanteSum int, -- 远特数量
cDijiaSum int, -- 迪加数量
cGuoMeiSum int -- 国美数量
);

insert into testRowToColumn(cMonth,cYuanteSum,cDijiaSum,cGuoMeiSum) values('1月',300,200,100);
insert into testRowToColumn(cMonth,cYuanteSum,cDijiaSum,cGuoMeiSum) values('2月',320,220,120);
insert into testRowToColumn(cMonth,cYuanteSum,cDijiaSum,cGuoMeiSum) values('3月',30,20,10);

select * from testRowToColumn;

select cYuanteSum,cDijiaSum,cGuoMeiSum ,max(case cMonth when '1月' then cYuanteSum end) cYuanteSum,
       max(case cMonth when '2月' then cYuanteSum end) cYuanteSum,
			 max(case cMonth when '3月' then cYuanteSum end) cYuanteSum,
			 max(case cMonth when '1月' then cDijiaSum end) cDijiaSum,
       max(case cMonth when '2月' then cDijiaSum end) cDijiaSum,
			 max(case cMonth when '3月' then cDijiaSum end) cDijiaSum,
			 max(case cMonth when '1月' then cGuoMeiSum end) cGuoMeiSum,
       max(case cMonth when '2月' then cGuoMeiSum end) cGuoMeiSum,
			 max(case cMonth when '3月' then cGuoMeiSum end) cGuoMeiSum
			 from testRowToColumn group by cYuanteSum,cDijiaSum,cGuoMeiSum;

35* 显示数据库时区
show variables like "%time_zone%";

java连接数据库参数
?useUnicode=true&characterEncoding=utf8&allowMutiQueries=true&&useTimezone=true&serverTimezone=GMT%2B8

36* 保存或更新saveOrUpdate(不存在就插入，存在就更新)
INSERT INTO tablename(field1,field2, field3, ...) VALUES(value1, value2, value3, ...) ON DUPLICATE KEY UPDATE field1=value1,field2=value2, field3=value3, ...;
Insert into testtb (id2, name) values(b, 'bb') ON DUPLICATE KEY UPDATE name='bb'

INSERT INTO t1 (a,b,c) VALUES (1,2,3)
  ON DUPLICATE KEY UPDATE c=c+1;
其中update相当于执行了
UPDATE t1 SET c=c+1 WHERE a=1;


--------------------------------
problem

安装完mysql8.0以后临时密码找法
grep "A temporary password" /var/log/mysqld.log

1*Too many connections

/etc/my.cnf
max_connections=1000


通常，mysql的最大连接数默认是100, 最大可以达到16384。
1、查看最大连接数:
show variables like '%max_connections%';
2、修改最大连接数
方法一：修改配置文件。推荐方法一
进入MySQL安装目录 打开MySQL配置文件 my.ini 或 my.cnf查找 max_connections=100 修改为 
max_connections=1000
SET PERSIST max_connections = 500;
SET PERSIST mysqlx_max_connections = 500;
 服务里重起MySQL即可.
方法二：命令行修改。不推荐方法二
命令行登录MySQL后。设置新的MySQL最大连接数为200：
MySQL> set global max_connections=200。
这种方式有个问题，就是设置的最大连接数只在mysql当前服务进程有效，一旦mysql重启，又会恢复到初始状态。因为mysql启动后的初始化工作是从其配置文件中读取数据的，而这种方式没有对其配置文件做更改。


2* transaction manager 修改默认引擎使其支持事务

a查看mysql存储引擎命令，在mysql>提示符下搞入show engines;字段 Support为:Default表示默认存储引擎  
b设置InnoDB为默认引擎：在配置文件my.cnf中的 [mysqld] 下面加入default-storage-engine=INNODB 一句
c重启mysql服务器：mysqladmin -u root -p shutdown或者service mysqld restart 登录mysql数据库，

3* 乱码设置
1程序中my.ini配置
default-character-set=utf-8
2数据库编码
3数据库表编码
4数据库字段编码
5数据库字段中存储内容编码

4* 2059 - authentication plugin 'caching_sha2_password' -navicat连接异常问题解决
找到配置文件my.ini
将default_authentication_plugin=caching_sha2_password改为default_authentication_plugin=mysql_native_password

用命令行登陆
alter user 'root'@'%' identified with mysql_native_password by 'Y4yhl9tbf110**';

5* 1067 - Invalid default value for 日期字段
show variables like 'sql_mode';
记下当前值如
ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
去掉NO_ZERO_IN_DATE,NO_ZERO_DATE

ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION

set session sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
检查下当前值
show variables like 'sql_mode';
永久修改在my.cnf中添加
sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
添加完以后重启mysql


6* 1153 - Got a packet bigger than 'max_allowed_packet' bytes
在MySQL安装目录下找到文件my.cnf，搜索[mysqld]，在其下面添加一句话
max_allowed_packet=400M

7* emoji表情插入失败
修改数据库，表，字段字符集为utf8mb4
my.cnf文件
[mysqld]
character-set-server=utf8mb4

[mysql]
default-character-set=utf8mb4

[client]
default-character-set=utf8mb4




某一字段设置成一个值
SELECT a.userId,(@rowNum:=@rowNum) userName,a.userNickName,a.userPass,a.regTime,a.lastLoginTime from userT a,(select (@rowNum:=111)) b 


获取行号rowid
SELECT (@rowNum:=@rowNum+1) rowId ,a.* from scoreT a,(select (@rowNum:=0)) b ORDER BY a.scoreValue desc


后一条减前一条记录


CREATE TABLE testNuma
(
testName varchar(200) unique NOT NULL , 
testNum int    
);

--清空数据区域
delete from  testNuma   ;

insert into testNuma(testName,testNum) values('aaa',1);
insert into testNuma(testName,testNum) values('bbb',2);
insert into testNuma(testName,testNum) values('ccc',3);
insert into testNuma(testName,testNum) values('ddd',4);
insert into testNuma(testName,testNum) values('fff',5);
insert into testNuma(testName,testNum) values('eee',6);
insert into testNuma(testName,testNum) values('hhh',10);
insert into testNuma(testName,testNum) values('iii',40);

select * from testNuma;

select testa.*,testb.*,testb.testNum-testa.testNum rsa from(
Select *,(@rowNuma:=@rowNuma+1) rowNo From testNuma atn, (Select (@rowNuma :=0) ) rna Order by atn.testName ASC
) testa,(
Select *,(@rowNumb:=@rowNumb+1) rowNo From testNuma btn, (Select (@rowNumb :=0) ) rnb Order by btn.testName ASC 
) testb where testb.rowNo=testa.rowNo+1;


找出重复次数
select phone,SUM(1) from testT1 group by phone HAVING SUM(1)>1

select CONCAT(fgid,fgname,awayname),SUM(1) from footballGameCT group by CONCAT(fgid,fgname,awayname) HAVING SUM(1)>1 

找出多列重复次数
select *,CONCAT(username,userpass) myisRepeat,sum(1) from usertest group by myisRepeat
只找重复的数据
select *,CONCAT(username,userpass) myisRepeat,sum(1) mycount from usertest group by myisRepeat HAVING mycount>1



删除重复数据 oracle sqlserver
delete from SIM_Account 
where   ICCID in (select ICCID    from SIM_Account group by ICCID      having count(ICCID) > 1) 
and   ID not in (select min(ID) from SIM_Account group by ICCID     having count(ICCID)>1) 


删除重复数据 mysql版本
delete from `mysqltesttablea1` where `userid` not in (select minid from (
select min(`userid`) as minid from `mysqltesttablea1` group by `username`
) b);


select count(1) from SIM_Account 
where   ICCID in (select ICCID    from SIM_Account group by ICCID      having count(ICCID) > 1) 
and   ID not in (select min(ID) from SIM_Account group by ICCID     having count(ICCID)>1) 




--------------------------------------------------------------

号段内有多少个手机号
select MYP,"SUM"(1) from (select "SUBSTR"("phoneNum",4,4) MYP,"agentT".* from "agentT"  ) 
group by MYP HAVING "SUM"(1)>=1

查询有多少手机号段
select DISTINCT MYP from (select "SUBSTR"("phoneNum",4,4) MYP from "agentT"  ) 

按时间查
SELECT * FROM "agentT" WHERE "tmpAddTime" > TO_DATE('2015-11-11 09:30:12', 'YYYY-MM-DD HH24:MI:SS') and ROWNUM<5000



--------------------------------------------------------------

select *,case t.name when 1 then '男' when 2 then '女' end as sex from tt t

-----------------------------------------------------------------
分组求和
select sum(age),`name` from t2 WHERE `level`=1 GROUP BY `name`


DROP TABLE IF EXISTS `testmysqldata`;
CREATE TABLE `testmysqldata` (
  `t1` tinyint(1) DEFAULT NULL,
  `t2` smallint(1) DEFAULT NULL,
  `t3` mediumint(1) DEFAULT NULL,
  `t4` int(1) DEFAULT NULL,
  `t5` int(1) DEFAULT NULL,
  `t6` bigint(1) DEFAULT NULL,
  `t7` bit(1) DEFAULT NULL,
  `t8` double(1,0) DEFAULT NULL,
  `t9` double(10,0) DEFAULT NULL,
  `t10` float(10,0) DEFAULT NULL,
  `t11` decimal(10,2) DEFAULT NULL,
  `t12` decimal(10,2) DEFAULT NULL,
  `t13` char(1) DEFAULT NULL,
  `t14` varchar(10) DEFAULT NULL,
  `t15` date DEFAULT NULL,
  `t16` time DEFAULT NULL,
  `t17` year(4) DEFAULT NULL,
  `t18` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `t19` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- ----------------------------
-- Table structure for mysqltesttablea1
-- ----------------------------
DROP TABLE IF EXISTS `mysqltesttablea1`;
CREATE TABLE `mysqltesttablea1` (
  `userid` varchar(255) NOT NULL,
  `username` varchar(255) NOT NULL,
  `userpass` varchar(255) NOT NULL,
  `userage` int(11) DEFAULT NULL,
  PRIMARY KEY (`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mysqltesttablea1
-- ----------------------------
INSERT INTO `mysqltesttablea1` VALUES ('0', 'admin', 'admin', '10');
INSERT INTO `mysqltesttablea1` VALUES ('1', 'user1', 'user1', '18');
INSERT INTO `mysqltesttablea1` VALUES ('2', 'user2', 'user2', '19');
INSERT INTO `mysqltesttablea1` VALUES ('3', 'user3', 'user3', '20');
INSERT INTO `mysqltesttablea1` VALUES ('4', 'user4', 'user4', '30');
INSERT INTO `mysqltesttablea1` VALUES ('5', 'guest5', 'guest5', '18');
INSERT INTO `mysqltesttablea1` VALUES ('6', 'guest6', 'guest6', '19');

INSERT INTO `mysqltesttablea1` VALUES ('20', 'admin', 'admin', '10');
INSERT INTO `mysqltesttablea1` VALUES ('21', 'user1', 'user1', '18');
INSERT INTO `mysqltesttablea1` VALUES ('22', 'user2', 'user2', '19');
INSERT INTO `mysqltesttablea1` VALUES ('23', 'user3', 'user3', '20');
INSERT INTO `mysqltesttablea1` VALUES ('24', 'user4', 'user4', '30');
INSERT INTO `mysqltesttablea1` VALUES ('25', 'guest5', 'guest5', '18');
INSERT INTO `mysqltesttablea1` VALUES ('26', 'guest6', 'guest6', '19');

--通过触发器检查重复数据
select * from `mysqltesttablea1` ;
delete from `mysqltesttablea1` where `userid`='7';

INSERT INTO `mysqltesttablea1` VALUES ('8', 'admin1', 'admin1', '21');

drop trigger uniTrigerForInsertmt;
create trigger uniTrigerForInsertmt 
before INSERT on `mysqltesttablea1` 
FOR EACH ROW
BEGIN
    set @c1=(select count(1) from `mysqltesttablea1` where username=new.`username` ) ;
    if @c1>=1 THEN
        insert into `c9a6d387_1` values(1,1);
    END IF;
END;

-----------------------------------------------------------------
正则表达式
create table testphone(
phoneNum varchar(32)
);

insert into testphone(phoneNum) values('17055661234');
insert into testphone(phoneNum) values('17055665678');
insert into testphone(phoneNum) values('17055661111');
insert into testphone(phoneNum) values('17055661112');
insert into testphone(phoneNum) values('17055661222');
insert into testphone(phoneNum) values('17055661333');
insert into testphone(phoneNum) values('17055666666');

select * from testphone;

select * from testphone where phoneNum REGEXP '2$';

-----------------------------------------------------------------
多列合并显示
drop table if exists studentT ;
create table studentT(
id varchar(32) primary key,
stname varchar(500)
);

insert into studentT(id,stname) values(1,'随口一说');
insert into studentT(id,stname) values(2,'老衲');
insert into studentT(id,stname) values(3,'小妞');
insert into studentT(id,stname) values(4,'白狼');
insert into studentT(id,stname) values(5,'松鼠');

select * from studentT;

drop table if exists courseT ;
create table courseT(
id varchar(32) primary key,
cname varchar(500)
);

insert into courseT(id,cname) values(11,'空手道');
insert into courseT(id,cname) values(22,'八卦掌');
insert into courseT(id,cname) values(33,'旋风腾云');
insert into courseT(id,cname) values(44,'外国投资');
insert into courseT(id,cname) values(55,'体育课');

select * from courseT;

drop table if exists studentCourseT ;
create table studentCourseT(
sid varchar(32),
cid varchar(32)
);

insert into studentCourseT values(1,11),(1,22),(1,44),(1,55);
insert into studentCourseT values(2,11),(2,22),(2,33),(2,44),(2,55);
insert into studentCourseT values(3,11);
insert into studentCourseT values(4,22),(4,33);
insert into studentCourseT values(5,33),(5,44);

select * from studentCourseT;

select * from studentCourseT a left join studentT b on a.sid=b.id left join courseT c on a.cid=c.id;

select b.stname stname,GROUP_CONCAT(cname,",") course from studentCourseT a 
left join studentT b on a.sid=b.id 
left join courseT c on a.cid=c.id group by a.sid;
-----------------------------------------------------------------
左联或右联时带条件
select case when sourcetype=1 then b.username when sourcetype=2 then c.username end username,a.* from appFileListT a 
left join appUserT b on a.opuid=b.uid and sourcetype=1 left join webUserT c on a.opuid=c.uid and sourcetype=2
-----------------------------------------------------------------
左联或右联带条件，统一多张表字段为一个字段查询条件
select * from (select case when sourcetype=1 then b.phone when sourcetype=2 then c.phone end phone,
case when sourcetype=1 then b.username when sourcetype=2 then c.username end username,a.* from appFileListT a 
left join appUserT b on a.opuid=b.uid and sourcetype=1 left join webUserT c on a.opuid=c.uid and sourcetype=2 ) r1 where r1.phone='15555555555';
-----------------------------------------------------------------



mysql优化指南

1修改最大连接数
进入MySQL安装目录 打开MySQL配置文件 my.ini 或 my.cnf查找 max_connections=100 修改为 
max_connections=11210

2对数据量大的表添加分区，并对查询参数添加索引

